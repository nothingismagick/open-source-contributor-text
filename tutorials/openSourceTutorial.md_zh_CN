*这是一份对 “开放源码” 的深度介绍，并通过 “Quasar框架” 所采用的方法中的一些具体例子来说明。因为我们打算使用本教程来对现有的以及将来的所有贡献者进行培训、并为他们提供参考。*

### 代码库

https://github.com/nothingismagick/quasar-articles/blob/master/tutorials/openSourceTutorial.md

<center>
  <img src="https://ipfs.busy.org/ipfs/QmNh5ir9k6hrJNZNnhYXKgvMGfAzUPWFiVyDmss2J3kacJ" alt="GPL_MIT_glow.png" /> 图片：CC0 由@nothingismagick提供
</center>

### 将讨论的话题

> 你将了解“开放源码”和最佳实践, 以确保自己的贡献符合要求。

#### **简介**

- 你将了解版权、授权和归属的区别
- 你会理解 "自由软件和开源软件" 的含义
- 你将明白 "许可性" 和 "保护性" 许可证之间的区别
- 你会了解许可证的发现和授权协议的相关内容
- 你将学习使用开源的代码及其他素材

#### **你的身份和权利**

- 你将了解 "保密协议" (NDA) 的相关内容
- 你将了解 "贡献者许可证协议" (CLA) 的相关内容
- 你会了解如何成为一名“通过审核”的贡献者
- 你将了解使用 "开发人员原产地证书"的原因
- 你会知道 "由......签署" 的含义
- 你会了解“让渡书”的相关内容
- 你将了解"出处"的相关内容

#### **许可证类型**

- 代码的许可证
- 文本/文档的许可证
- 艺术品/设计/视频的许可证
- 字体的许可证

### 要求

- 能够熟练地阅读英语
- 对`git`有基本的了解 
- 了解与你的活动领域相关的文件类型 

### 难度

- 基础到中级

# 教程内容

> 本教程为有兴趣参与开源项目的人提供了入门指南。 对于想了解更高级主题的积极贡献者, 这可能也会有用。 此外, 由于授权许可问题可能会引起争议, 对于那些想参与讨论开源的人来说, 这也是一个参考文本。 虽然我们使用的是 "Quasar框架" 中的具体示例, 但此处的问题广泛适用于开源软件开发的各个方面。
> 
> 我们希望，在开源软件的授权许可方面，你可以对所有积极的利好以及潜在的陷阱有更深入的了解。 从 “介绍” 开始阅读会很有帮助，因为它定义了本教程将反复提及的一些术语。 它还会教你一些简单的方法, 以确保你的贡献符合参与项目所采取的授权机制。 然后, 会开始讲到你, 也就是贡献者的权利和责任。 最后, 会深入讨论授权的各个领域, 包括代码、文案、设计和字体。

## 前言

> 某些软件的源代码, 只有创建它的具有独家控制权的人员、团队或组织才能进行修改。 这类软件被称为 "专有" 或 "封闭式源码" 软件。 ... 而开源软件就有所不同。 它的作者 [ 使其源代码可用 ](https://opensource.com/business/13/5/open-source-your-code) ，从而让其他人能够查看、复制、学习、更改或分享该代码。 [ LibreOffice ](https://www.libreoffice.org/) 和 [ GNU 图像处理程序 ](http://www.gimp.org/) 是开源软件的示例。

https://opensource.com/resources/what-open-source

每一个创造性的行为都可以归功于某人或一起工作的一群人。 实际上, 认为物体会存在于真空中是很愚蠢的。 我们都是相互联系的, 想法往往也呈现出自己的生命力。 然而, 当今时代, 许多人开始通过公开的方式来保护他们的想法不被窃取：通过公布他们的成果, 使其他人得到授权和邀请, 以对项目做出贡献，或者甚至选择了完全不同的方向。

就像过去几个世纪里的行会保护其行业机密的做法, 对想法进行 "专有" 保护，在立法和自由贸易协定中不分享"封闭式源码" ，其理由都可以直接追溯到涡轮式资本主义给世界带来的很多问题上。 但是，你并非束手无策。 你可以参与到开放源码的大潮中来。

## 介绍

### 版权、授权和归属

在现代民主社会中, 人们普遍认为, 版权声明是所有授权的先决条件, 因为必须有人负责宣布如何使用被授权的东西。 说来奇怪（却也是合乎逻辑的），如果你想将自己的作品以 “公有领域” 或 “著佐权” 的形式分享，必须先声明自己对作品的所有权（并且征得所有参与贡献者的同意）。

一旦完成版权声明, 版权持有人可以通知代码/文本/艺术品的读者和用户，在何种情况下可以正当使用它。 无论原作者/版权持有人采用什么授权方式, 如果使用第三方经授权的开源素材，就该在代码库中保留这些许可证的副本。 删除或编辑源文件的标题或元数据中的许可证文件或引用文献都是不可以的，因为这种偷盗行为算是剽窃的一种形式。

只要你作品 (网站、应用程序等) 的 "消费者" 被告知在何处可以看到你用于构建工程的第三方项目的许可证, 你就不必提供这些许可证。

如果你在工作时决定使用第三方的任何成果, 除了公有领域的作品 (我个人认为你也应该引述该项), 你需要（在法律上和道义上) 引述其来源。 这称为 ** 归属 **, 通常的经验法则是, 应该引述所使用的所有代码。 我们稍后会在本教程中对此进行更多的介绍, 因为根据所归属资源的领域，会有不同的要求。

### “自由软件和开源软件”

> "开源" 一词指的是人们可以修改和共享的东西, 因为它的设计是可以公开访问的。
> 
> https://opensource.com/resources/what-open-source

对于 "开" 源中固有的 ** 自由 ** 程度 (甚至 ** 自由 ** 的含义), FLOSS强硬派一直争论不休。 然而, 如果我们回到1998年去，读一读[ 这篇文章 ](https://opensource.com/article/18/2/coining-term-open-source-software)，可能会有所帮助。文中，克莉丝汀·彼得森女士提出了“开源”的概念。 虽然理查德·斯托曼和莱纳斯·托瓦尔兹是关于此种软件的两名最成功、最有名的发声支持者，其关键在于, 即使这个术语最初是作为 "营销手段" , 它仍在持续改变着世界上每个人的生活 —— 可以说是让生活有所改进。

研究这一领域算是时间最久的斯托曼和 "自由软件基金会" (FSF), 将自由定义为开源的重要组成部分, 因为使用和修改代码的自由同时也是以整个社区的名义所承担的一种责任。

<center><strong>"free"是什么？ “libre”是什么？</strong></center>

即使你暂时忽略* free * 也意味着 "不花任何钱" (这是加上 “libre” 的主要原因), 仍然存在一个未解决的语义问题。实际上, 可能永远无法解决:

从你的角度看, Gnu 公有许可证不是绝对免费的, 因为它要求必须将对代码所做的更改返回给社区。而 “free” 则意味着你可以决定怎么做以及如何处理你所使用的代码。 同时，从另一角度看, 有些人认为MIT许可证不完全免费。 他们之所以这么认为, 是因为在某些情况下, 代码可以被获准更改, 而不会返回到社区, 这在某种意义上是 "囚禁" 代码。

> 对此没有正确或错误的答案, 因为这是一个角度的问题 —— 然而每一位开发者和每一个组织都需要自己决定他们要把注意力放在哪里。 在Quasar框架中, 我们不是静修派，不认为代码本身是一种应得转让权利的精神上的存在。 如果我们是在从事Linux内核编码, 也许有所不同。但是我们更关心代码的人性方面, 并且认为使用我们项目的人应该有最终的选择权去做他们想要做的事情。 这就是为什么我们采取了“宽容”的做法, 并选择了MIT的许可证。

经常有很多关于 "代码应该自由到什么程度" 的讨论。 我建议你问自己四个问题:

1. 你更喜欢单独工作吗？
2. 你担心别人窃取你的主意吗？
3. 你是否自己编写了所有代码, 包括库？
4. 你是否签署了相关工作的任何保密协议？

如果你对其中任何一个问题的回答为 ** 否定 **, 那么，为你的工作成果使用开放源码许可证是一个很好的方法。

如果你对这些问题的回答都为 ** 肯定 **, 那么考虑将你的工作成果授权为开源，可能仍然是保护你的工作成果，并确保它对世界其他地区产生影响的最佳方法之一。 就这样想: 如果当前你周围的所有软件都不是开源的, 你还能像现在一样工作吗？ 难道你不该分享工作成果来回馈社区吗？

### “宽容性” VS. "保护性" 授权

关于使用 GPL 授权项目的常见误解之一是, 它将防止公司窃取你的主意并用它谋利（却不给你任何利益分成）。 这从专利角度看是不正确的。 如果有人想违法窃取你的代码, 他们仍会做的。 如果有公司想使用你的GPL库, 他们可以将它与系统的其余部分隔离开来, 并且不显示其专有代码。 他们可以获取你的代码, 进行逆向拆解和分析并改写它。 如果这是你最大的顾虑, 那就此打住, 回到本教程的开头, 仔细阅读以决定你是否想参与开源, 或者仅仅是从中获利。

MIT、BSD 和 Apache 是开源软件社区所称的 "宽容性" 许可证。 “宽容性” 意味着作者赋予你很大的权利去使用他们共享的软件, 甚至有权使用它来赚取利润，并根据你的目的去更改它。 只要你保留了原始许可证的副本, 并通知那些对你使用该特定软件感兴趣的人, 那么你就可以对代码进行任何操作，甚至更改它, 而不通知任何人你做了改动。

> 著佐权 (Copyleft) 赋予人们自由分发副本和修改版本的权利，并规定在后来的[衍生品](https://en.wikipedia.org/wiki/Derivative_works)中要保留同样的权利。 https://en.wikipedia.org/wiki/Copyleft

通过寻求保护代码和社区的权利，这类 "保护性" 授权超越了 MIT 和 APACHE 的 "宽容性" 授权。 对源代码所做的任何修改都必须返回给社区, 并且你不得对代码进行重新授权。 GPL 和 CC-SA 是使用这种方式的两种许可证。

### 许可证发现和授权要求

在你的项目中使用开源软件是一件很棒的事情, 但是你需要保持勤奋, 尤其是当你在为另一个项目做贡献的时候。 如果你需要做有关许可证合规性的报告 (例如, 在公共机构或企业法定防火墙中), 就更需要这样。 无论如何，手动浏览并查找所有的许可证文档会有点麻烦。

有一些项目可以解决这个关于发现的问题, 比如 [nlf](https://www.npmjs.com/package/nlf) 和 [https://fossa.io/](https://fossa.io/ "https://fossa.io/"), 特别是 [ 其免费的不需要注册的**CLI** ](https://github.com/fossas/fossa-cli)。

    $ nlf --summary detail > nlf.txt
    

[下面是使用 **nlf** 方法从Quasar库中做出的报告。](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/nlf_report_licenses_quasar.txt.md)

如果要查看代码库中由 ** "fossa CLI" ** 生成的许可证报告, 在执行安装说明后, 只需使用以下命令即可:

    $ fossa report licenses > fossa.txt
    

[下面是使用 **fossa cli** 方法从Quasar库中做出的报告。 ](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/fossa_report_licenses_quasar.txt.md)正如你看到的, 大多数模块都使用MIT许可证, 但有几项仅从报告来看并不清楚: 其中有15个项目没有被 **fossa** 自动探测到。 我跟踪每个链接, 追查它们的许可证, 并不仅记下了许可证，还标出是我做的。

此外, 我发现只有我们库中的其中一个 (stylint) 需要 GPL 许可证, 但开发人员在 package.json (GPL-2) 的声明和实际的许可证文件 (GPL-3) 之间存在许可证上的冲突。

这也是你将需要做的。 如果许可证文件不包含在项目中, 并且你找不到, 那么与作者联系是明智的选择。

** 警示 **: 这些自动化系统不是万无一失的 (例如, 许可证检测模块可能会检测到多个许可证, 即使它本身使用的是其他许可证)。 如果你受到监管合规的约束, 你需要手动检查所有文件。如果你需要解释说明，或者甚至需要另一种许可证，都尽管去联系作者。 有时这是可能的。 记住, 请求许可比请求宽恕更好。

### 使用开放源码

如果使用的是开源的任何内容, 则必须声明其使用, 并使原始许可证易于访问。 例如, 如果你正在使用项目中的node模块, 则当有人下载项目文件并 "安装" 依赖项时, 这些许可证在项目的源代码中就是可用的。 通常它在根文件夹中的文件名为 `LICENSE` ，或者你也可以在 `package.json` 中的 "许可证（license）" 字段里找到它。

一般来说, 这就足够了。但如果你对原始库进行任何更改, 你可能需要通知和/或提交这些更改到社区。 这取决于许可证类型, 但我们将在最后一部分涵盖授权的具体内容。

> ** Stack Overflow **: 一个常见的陷阱是只复制和粘贴你在 stackoverflow.com 上找到的东西 - 但这是危险的, 因为即使它暗示用户共享此信息, 你也不能百分百确定使用1对1的代码示例是否适当 (或被允许) 。 引用资源的常见做法比什么都没有好, 但是你确实应该考虑重写示例以适应自己的代码风格和项目需要，并将来源列为 "灵感"。

## 你的身份和权利

### 什么是 "保密协议" (NDA)

保密协议是一份合同。如果你将与需要保护商业机密的组织合作, 就可能需要签署一份合约。 作为保密协议的签署人, 你将受到合同的约束, 以对提供给你的信息保密, 并且可能包括在特定时间段内类似行业中的非竞争条款。 尽管这在开源行业中通常是不常见的, 但如果你被授予访问 API 密钥、登录等 "机密" 的权限, 则可能需要签署协议。

> 如果你面前有份保密协议, 就像对待任何合同 - 阅读一切条款、问问题并征求律师意见都是明智的。 Quasar 不会要求你签署保密协议。

### 什么是贡献者许可协议 (CLA)

贡献者许可协议是项目所有者和代码贡献者之间的合约。 和保密协议 (这是限制性的) 正好相反, 贡献者许可协议是 "互惠" 的, 因为它实际上是在保护所有者和贡献者双方的权利。 在贡献者许可协议中，贡献者明确地允许所有者使用其贡献, 并且所有者明确地允许贡献者使用他们认为合适的贡献。

但是, 许多开发人员认为贡献者许可协议是有问题的, 因为他们赋予所有者的权利中包括更改代码许可证的能力。 [Here is a great writeup by gitlab](https://about.gitlab.com/2017/11/01/gitlab-switches-to-dco-license/) about why they switched from a CLA to a DCO - and here is their [in-depth analysis from a project-management perspective](https://docs.google.com/a/gitlab.com/document/d/1zpjDzL7yhGBZz3_7jCjWLfRQ1Jryg1mlIVmG8y6B1_Q/edit?usp=sharing).

### 什么是 "开发人员原产地证书" (DCO)

开发人员原产地证书是由贡献者作出的一项法律声明, 他们证明自己撰写了该项贡献, 而且他们有法律权力来贡献这一代码。 正如上述Gitlab的例子，这通常与MIT或Apache之类的许可证结合在一起。 你可以在此阅读整个许可证 (很简短): https://developercertificate.org/

将 ` signed-off-by ` 标志添加到Git提交, 意味着你在根据开发人员原产地证书操作。 虽然不是每一次提交都有必要, 但是它在提供一种 "责任链", 以防事情出错。 最佳实践建议使用贡献者的真实姓名。 在此你可以阅读更多执行此操作的详细信息: https://stackoverflow.com/a/1962112

某些 IDE (比如 [ Webstorm ](https://www.jetbrains.com/help/webstorm/2017.2/using-git-integration.html#commit))，可为你提供在审阅代码时直接从提交窗口添加此标志的功能。 它将在提交消息的末尾添加以下行: ` Signed off by: <username> `

请注意, 如果你正在处理的项目的经理要求你签名，务必核对，明确他们确实是希望你签署每项提交, 还是只需签署标签或PR's就可以。 从技术上讲, 进行合并的人是需要签名的人, 但通过添加你的姓名到单次提交中, 就可以清楚地知道谁对哪些更改负有责任。 这是一个喜好的问题。

> 在Quasar, 我们要求你签署所有提交。

### 成为一名“通过审核”的贡献者

Github 或 Gitlab 上已通过审核的贡献者是为其帐户添加了GPG密钥的开发人员, 他们使用此GPG密钥对其提交进行签名。 虽然这不是集成所要求的，但有些项目经理可能需要它 - 尤其是因为窃取他人的登录凭据并修改关键代码库比窃取其GPG密钥更容易。

下面的链接将展示如何创建一个GPG密钥, 并在需要时将其用于 Github 或 Gitlab。

- [向 Github 添加一个GPG密钥](https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/)
- [在 Gitlab 上签署提交](https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/index.html)
- https://blog.github.com/2016-04-05-gpg-signature-verification/
- https://stackoverflow.com/questions/10161198/is-there-a-way-to-autosign-commits-in-git-with-a-gpg-key

### 何时需要获取“让渡”书

在给人和私有财产拍照片并将其用于任何非私人用途时, 通常需要让渡书。 虽然各管辖权的具体细节不同, 但让人们签署一份让渡书是非常重要的。如果照片的拍摄地点很清楚, 那么你可能需要获得所有者的许可。

> 所谓的 "互惠薪酬" 是一种巧妙处理肖像让渡书 (如果他们确实想支持你) 的方式。 在拍摄前, 准备两张收据。 其中一张收据上写明你支付他们比如5欧元作为模特的酬劳。 在另一张收据上, 写明他们付给你比如5欧元购买照片副本。 规则 (得到现金, 保存副本) 适用, 所以每一方有一张原始收据和一张副本收据。 你将最终图像的数字副本的链接发送到使用它的开源代码库, 并在他们给你的收据副本上记下来。 将此保存在自己的记录里, 于是皆大欢喜。

If you do use photographs of people that you have made and submit them to open source projects, you need to be able to prove that the person gave you permission, and you should keep their release form on file and available.

### How can I document "provenance"

Provenance is a word that describes the history of a work. Code that is shared under an open-source license and within the context of a git repository is more or less self-documenting. Images are less obvious, and it is especially tricky with digital-collage works that combine a number of resources.

Dealing with provenance for designers is important, as rights to visual images are hotly contested and often times lead to legal battles. Even if only public-domain resources are being used, it is still a good practice to record your work in a provenance document. This type of document is like the bibliography in a scientific paper, in which the ideas and authors are recorded. Although there is no "standardised" approach, the best method is to not only record the sources and the times accessed, but also track down the licenses for each component. If you want an example of this, feel free to look at the citations section [in this graphics breakdown](https://busy.org/@nothingismagick/qcensus2018-campaign-graphics-breakdown) written in the @utopian-io style.

> The last thing anyone wants is a legal battle because it drains resources like time and money. If you are contributing to an open-source project, make sure that you are not putting them in hot-water. At Quasar, you can rest assured that the Art Department takes this VERY seriously, and violations of this trust are likely to lead to blacklisting or hammerbanning.

## License Types

### Major licenses for code

This introduction cannot possibly explain the subtle differences between all of the different licenses for code, because there are dozens. A license is added to code by either placing a reference to it in the header of the file being licensed in the case of distributables, in a LICENSE file in the root level of a repository, in the README about the project and potentially in the package.json (if using node).

If you skipped ahead and didn't read the earlier chapters, here is a quick recap of the three main license types and a popular example of each, along with two links that go into more detail and analysis.

- **Permissive**: [MIT](http://www.opensource.org/licenses/MIT)
- **Protective**: [GPL-3](https://www.gnu.org/licenses/gpl-3.0.en.html)
- **Public Domain**: [WTFPL](http://www.wtfpl.net/)
- [Github's License Helper](https://choosealicense.com/)
- [The exhaustive list by the GNU Foundation](https://www.gnu.org/licenses/license-list.html)

> At the Quasar Framework all contributions to the core libraries are required to be MIT. By contributing anything, you are agreeing to this license.

### Important licenses for text / documentation

Text and documentation is also a creative work, and is also generally protected under copyright laws. You can transfer these rights to third parties or to project owners to whom you will be giving your contributions by choosing either a Creative Commons resource or the Free Document License.

It is considered best practice to name the license and author(s) at the end of the document being licensed.

- [Creative Commons](https://creativecommons.org/)
- [Free Documentation License](https://www.gnu.org/licenses/fdl.html)

> At the Quasar Framework all documentation is (or will be) licensed under the FDL.

### Licensing artwork / design / video

There are literally as many legal regulations for this type of contribution as there are countries on the planet, so it is absolutely inappropriate to go into detail about how things are different from nation to nation. No matter what, the person that made the image can never lose the right to say that they were the owner (unless an absolutely draconian contract prevents it - and in some cases this won't stand up in court). This is why there is one common rule that will : Cite the author and name the license. If you can't do that, then don't use the asset.

Depending on where and how the contribution is to be used, there are a number of ways in which this citation can be made:

1. Name the file accordingly
2. Put license information in a watermark in the file
3. Inject the information into the metadata of the file
4. Cite the image sources / licenses directly after the image if possible
5. Put this same information in a footnote / endnote / linked document
6. Place license information or licenses and release form-cover-sheets in the repository in the same folder as the image or some other delegated location

Common licenses to use for Images / Designs / Videos are:

- [Creative Commons](https://creativecommons.org/)
- [Public Domain / CC0](https://creativecommons.org/share-your-work/public-domain/cc0/)
- [Apache v2](https://apache.org/licenses/LICENSE-2.0)

> Quasar prefers CC-BY or CC0 licenses.

### Font licenses

Of the hundreds of fonts listed at [Google Fonts](https://fonts.google.com/attribution), there are exactly two different licenses used: Either the Apache License v2, or the SIL Open Font License v1.1. The vast majority are OFL, and it is basically the same type of permissive license as MIT.

If you are using a font, you need to make sure that you really have the license for it, as some professional font forges will sell different types of licenses depending on the application. (As in one license for desktop publishing, another for websites, etc.) If you are using an open-source font, best-practice is to put a copy of the license in the folder where you are maintaining your fonts.

Furthermore, some services like FontSquirrel offer a [WebfontGenerator](https://www.fontsquirrel.com/tools/webfont-generator) that enables designers to make a set of font-files so that individual browsers can select the type that they are most well-equipped to use. They require you to verify that you have the right to convert the font to other formats. The SIL OFL does permit this. If there is no license that you can find, assume that you do not have the right to use the font.

- [OFL-FAQ web version (1.1-update5)](https://scripts.sil.org/cms/scripts/page.php?item_id=OFL-FAQ_web)

# Final Words

Just because you "open" your work to collaboration from others, this is not the end of the story. Just because you slap a Creative Commons license on a photoshop file does not mean it is open and free. The degree of openness of an asset or project is also determined by the operating system and the software needed to use and or modify the file. Please consider publishing not only the results of the process of your work, but also inform people about how you did it.

Furthermore, please do not use pirated software when working on open-source projects. Not only is it "uncool" and damaging to the honour of the entire open-source community, you are putting yourself and your colleagues at risk, especially if you have high-value credentials, like server logins etc. There is no better way to get yourself (and possibly your team) hacked than to use cracks.

# Further Resources

In case you want to go more into depth about these topics, we have a few additional resources that we highly recommend:

- Stallman's distinction between [FLOSS and FOSS](https://www.gnu.org/philosophy/floss-and-foss.en.html)
- This chapter of the [ZeroMQ Guide](http://zguide.zeromq.org/page:all#toc141) goes into great detail about governance in open-source projects with the specific example of their community

#### Proof of Work Done (Authorship)

The original version of this article has been compiled and written by @nothingismagick https://github.com/nothingismagick

#### License

This work and all derivatives are [licensed under the FDL 1.3](https://github.com/nothingismagick/quasar-articles/blob/master/LICENSE).

> Written with [StackEdit](https://stackedit.io/).