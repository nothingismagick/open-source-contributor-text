*這是一份關於開放源碼 (Open-Source) 的深入介紹，我們將通過Quasar框架中採用的一些具體例子來進行說明，因為我們打算使用這份教材來培訓未來(和現在) 的所有貢獻者並為他們提供參考。*

### 資源庫

https://github.com/nothingismagick/quasar-articles/blob/master/tutorials/openSourceTutorial.md

<center>
  <img src="https://ipfs.busy.org/ipfs/QmNh5ir9k6hrJNZNnhYXKgvMGfAzUPWFiVyDmss2J3kacJ" alt="GPL_MIT_glow.png" /> 圖片：CC0 由@nothingismagick提供
</center>

### 我們將討論甚麼？

> 你將了解開源及其最佳實踐的相關知識，以確保你的貢獻符合要求。

#### **簡介**

- 你將了解版權(copyright)、授權(licensing) 及署名(attribution) 的分別
- 你將了解"自由軟體和開源軟體"的含義
- 你將找出"寬鬆"及"保護"授權之間的分別
- 你將了解授權發現及授權協議的知識
- 你將了解如何使用開源代碼及其他資產

#### **您的身份和權利**

- 您將了解"保密協議" (NDA) 的相關知識
- 您將了解"貢獻者授權協議" (CLA) 的相關知識
- 你將了解如何成為一名"認證"貢獻者
- 你將了解使用"開發者原創證書"的原因
- 你將了解"由... 簽署"的意思
- 你將了解"豁免"書的相關知識
- 你將了解"出處"的相關知識

#### **授權類型**

- 代碼授權
- 文字 / 文件授權
- 藝術品 / 設計 / 影片授權
- 字體授權

### 要求

- 能夠熟練閱讀英文
- 對`git`有基本認識 
- 擁有與你活動領域相關的檔案類型知識 

### 難度

- 基礎到中級

# 教學內容

> 這教學是給有興趣參與開源項目者的入門指南。 對於想了解高級主題的積極貢獻者，這教材也可能對你有幫助。 最後，由於授權很容易引起爭議，這也是供希望參與開源討論者的參考文本。 雖然我們使用"Quasar框架"中的特定例子，但我們觸及的問題都是與開源軟體發展各個方面相關的。
> 
> 我們希望你能在開源軟體授權的重要事情上 (及潛在陷阱) 有更深的認識。 從介紹部份開始閱讀會是很好的起步，因為它定義了一些本教材經常提及的用語。 它還會教你一些簡單方法來確保你的貢獻能符合參與計劃的授權方案。 然後，教學將討論到你，即貢獻者擁有的權利和責任。 最後，我們將深入了解授權的各個領域，包括代碼、文案、設計及字體。

## 前言

> 有些軟體只有擁有獨家控制權的單位能夠修改，即其創建者、團隊或組織。 我們稱這種軟體為"專有"軟體或"閉源"軟體。 ... 開源軟體則不同。 作者[讓其原始碼開放](https://opensource.com/business/13/5/open-source-your-code)給其他人查看、複製、學習、更改或分享。 [LibreOffice](https://www.libreoffice.org/)及[GNU圖像處理程式](http://www.gimp.org/)就是開源軟體的例子。

https://opensource.com/resources/what-open-source

每一個創作行為都可被視為某人或某一群人的工作成果。 實際上，認為任何東西都存在於真空是很愚蠢的。 我們都是相互連結的，各種想法都是我們生活的呈現。 然而，現代社會中很多人開始保護自己的想法不被偷取，透過發佈作品讓其他人以授權及被邀的形式作出貢獻，或甚至把它帶到另一個完全不同的方向。

就如過去幾個世紀的公會保護它們的商業秘密一樣，對想法進行"專有"保護，及於立法和自由貿易協議中那"閉源"的奉獻，可直接追溯到渦輪式資本主義為世界帶來的很多問題。 但細想一下，其實你仍可以有所作為。 你可以參與開源運動的大勢當中。

## 簡介

### 版權、授權及署名

在現代民主社會，我們並遍認為版權聲明是所有授權的第一步，因為我們必須有人負責宣佈如何使用被授權的東西。 矛盾 (但某程度又很符合邏輯) 的事，如你想將你的作品以公有領域或著佐權(Copyleft) 的形式分享，你先需要聲明你是作品的擁有者 (同時每個曾為作品貢獻的人都同意)。

當完成了聲明版權，版權持有人可以通知代碼 / 文本 / 藝術品的讀者及使用者在什麼情況下可以適當地使用它。 無論原作者 / 版權持有人採用哪一種授權方式，如果作品使用了第三方的開源授權材料，就應在作品寄存庫中保留這些授權的副本。 在原始檔的標頭 (header) 或元數據 (metadata) 移除、編輯授權檔或授權參考是永不容許的事，因為這實際上是偷竊和剽竊的一種形式。

只要你作品 (網站、應用程式等) 的"消費者"被告知可以看到你用來建構作品的第三方項目授權，那你就不必提供這些授權。

如果你決定在作品使用第三方來源的材料，除了公有領域的材料外 (但我個人認為你也應該引用)，你必須 (在法律上和道德上) 引用來源。 我們稱其為**署名**，在一般經驗法則下，你應包含所有使用代碼的引用。 我們將在本教材更多的了解這部份，因為取決於署名資源的領域，會有不同的要求。

### "自由軟件和開源軟件"

> "開源"一詞指的是人們可以修改及分享的資源，因它的設計是可公開訪問的。
> 
> https://opensource.com/resources/what-open-source

FLOSS死硬派一直對"開"源中固有的**自由**程度，甚至**自由**的含義，有著持續不休的爭論。 然而，如果我們回到1998年[閱讀這篇文章](https://opensource.com/article/18/2/coining-term-open-source-software)，這篇提出了"開源"一詞的女士克里絲丁·彼得森所寫的文章，或會對這問題有更多的理解。 雖然理查斯托曼和林納斯托華茲是這問題上兩個最成功、最明顯和最有力發聲的支持者，但重點是就算這一詞最開始只被用作"行銷工具"，它還是堅持改變了地球上每個人的生活，可以說是更好的生活。

在這問題上研究了最長時間的斯托曼和 "自由軟件基金會" (FSF)，將自由定義為開源一個重要組成部分，因為你使用和修改代碼的自由同時也是你以整個社區名義承擔的責任。

<center><strong>什麼是Free？ 什麼是Libre?</strong></center>

就算你忽略了*Free*也意味著"不花任何錢"(這是加上Libre的主要原因) 的事實，我們仍有一個未解決的語義問題，事實上，這是一個可能永遠不能解決的問題：

如以你的觀點出發，Gnu公共授權並不是完全免費的，因為它附帶著的要求讓你必須把代碼的更改帶回社區 - 而Free則意味著你可以自行決定如何使用及處理那些代碼。 同時在另一個角度，有人則認為MIT授權並不完全免費。 他們這樣認為是因為在某些情況下，代碼可獲准做出更改並不需帶回社區 - 這是某種意義的"囚禁"代碼。

> 其實並沒有正確或錯誤的答案，因為這是觀點的問題 - 然而每個開發人員及組織都需要自己決定他們要把注意力集中到哪兒。 在Quasar框架中，我們不是純化論者，認為代碼是應得到轉讓權的精神存在。 或者我們工作的Linux內核會有所不同 - 但我們更關注代碼的人性方面，並相信使用我們計劃的人應得到做想要做的事情的最終選擇自由。 這是為什麼我們採取了"寬容"的取向並選擇了MIT授權。

我們經常有大量的討論關於"編寫代碼的自由度"。 我建議你問自己以下四個問題：

1. 你喜歡獨自工作嗎？
2. 你擔心別人偷取你的主意嗎？
3. 你是否自己編寫了所有代碼，包括代碼庫？
4. 你是否簽署了任何相關的保密協議？

如你在任何一個問題的回答是**否**，那麼使用開源授權會是一個好方法。

如你所有問題都回答**是**，那麼考慮將你的作品授權為開源可能仍是其中一個最好的方法去保護你的作品，並確保它對世界其他地方產生影響。 試想一下：如果今天你身邊所有軟體都不是開源的，你還能像平時一樣工作嗎？ 難道你不應該反饋社區而分享你的作品嗎？

### 寬鬆 VS. 保護授權

有關使用GPL授權你的項目時最常見的其中一個誤解是它會防止企業得到你的想法並用之謀利 - 而不帶給你任何利潤。 這明顯地是不正確的。 如果有人想違法盗取你的代碼，他們總會做的。 如果一家企業想使用你的GPL庫，他們可以將它與系統其餘部份分隔開來，並不顯示其專有代碼。 他們可以得到你的代碼，逆向分析並進行改寫。 如果這是你的最大顧慮，那請止步，回到教材的最開頭仔細閱讀，再決定你是否真的想參與開源 - 或僅僅只是想從中獲利。

MIT、BSD及Apache是開源軟體社區所稱的"寬鬆"授權。 寛鬆意指作者給予你很大權利去使用他們分享的軟體，甚至有權使用它來賺取利潤，及按你目的更改它。 只要你保留了原始授權的副本並通知那些對你使用那特定軟體感興趣的人，那麼你就可以對代碼做任何事情 - 甚至更改它而不需通知任何人。

> 著佐權 (Copyleft) 賦予人們自由分發副本及修改版本的權利，並規定在之後創作的[衍生作品](https://en.wikipedia.org/wiki/Derivative_works)保留相同的權利。 https://en.wikipedia.org/wiki/Copyleft

這類型的"保護"授權超越了如MIT和APACHE所看到的"寬鬆"授權，試圖保護代碼及社區的權利。 所有對原始代碼所做的修改必須帶回社區，而你並不能對代碼進行再授權。 GPL及CC-SA正是兩種使用這形式的授權。

### 授權發現及授權要求

在你的項目中使用開源軟體是一件很棒的事情，但你需要保持勤奮，尤其是當你在為另一個項目作出貢獻的時候。 如你需要對授權合規性 (例如在公共機構或企業法定防火牆內) 作出報告，就更需要這樣做。 在任何情況下，手動瀏覽及追縱所有授權檔案都是有點麻煩。

有一些計劃可助你解決這發現問題，如[nlf](https://www.npmjs.com/package/nlf)及[https://fossa.io/](https://fossa.io/ "https://fossa.io/")，特別是</a>免費且不需要注冊的**CLI**。</p> 

    $ nlf --summary detail > nlf.txt
    

[以下是使用**nlf**方法以Quasar資源庫所做的報告。](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/nlf_report_licenses_quasar.txt.md)

如你想查看資源庫內**fossa CLI**生成的授權報告，在按照說明進行安裝後，你可以輸入以下指令：

    $ fossa report licenses > fossa.txt
    

[以下是使用**fossa cli** 方法從Quasar庫所做的報告。](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/fossa_report_licenses_quasar.txt.md)如你所見，大部份模組都使用了MIT授權，但僅從報告中可以看出一些問題：15個項目未能被**fossa**自動檢測。 我追蹤了每個連結，追查它們的授權，不僅記下了授權，還備注了是我做的。

此外，我發現我們資源庫(stylint)中只有一個要求GPL授權，但開發人員在 package.json (GPL-2)的聲明及實際授權檔案 (GPL-3) 存在授權衝突。

這也是你將要做的事情。 如果項目不包含授權，而你也找不到任何授權，那麼與作者聯絡是明智的選擇。

**警告**：這些自動化系統並不是萬無一失的 (例如授權檢測模組可能會檢測出多個授權，即使它本身正使用其他授權)。 如你受到法則符合性的約束，你需要手動進行檢查 - 如你需要任何說明甚或是不同的授權，請與作者聯絡。 這在有些時候是可能的。 記住，請求許可比請求原諒更好。

### 使用開源

如果你使用任何開源的東西，你必須聲明它的用途及讓其原始授權易於訪問。 例如，如果你在項目中使用節點模組，則當有人下載項目檔案並"安裝"其依賴項時，這些授權應可在項目源代碼中使用。 你通常可以在根文件夾中稱為`LICENSE`的檔案，或在`package.json`中的"授權(license)"欄中找到它。

一般來說這就已經足夠，但如果你對原始庫進行了任何更改，則需要通知及/或提交這些更改到社區。 這視乎授權類型而定，我們將在最後一節中介紹授權的具體內容。

> **堆疊溢位(Stack Overflow)**：一個常見的陷阱是只複製和貼上你在stackoverflow.com上找到的東西 - 但這是很危險的，因為就算它暗示用戶分享了這資訊，你也不能百分百確定是否能適當地(或被允許）完全一樣的使用該代碼例子。 引用來源的常見做法比什麼都不做好，但你確實應該考慮重寫該代碼例子以符合你的代碼格式、項目的需要及將可將來源視為"靈感"。

## 您的身份和權利

### 什麼是 "保密協議" (NDA)

保密協議是當你將與一個有商業秘密要保護的組織合作時，你可能需要簽署的一份合約。 作為保密協議的簽署人，你將受協議約束，保密所有你得到的資訊，當中可能包括類似行業在指定時間的非競爭條款。 雖然這在開源行業一般來說是不常見的，但如你得到"秘密"權限如API金鑰、登入資料等，這就是需要的。

> 如你眼前有一份保密協議，就像對待任何合約一樣，仔細閱讀所有內容，發出提問，及徵求律師的意見。 Quasar 永遠都不會要求你簽署保密協議。

### 什麼是 "貢獻者授權協議" (CLA)

貢獻者授權協議是一份項目持有人及代碼貢獻者之間的合約。 與保密協議的限制性相反的是，貢獻者授權協議是雙方互惠的，它實際上是保障了持有人及貢獻者的權利。 在貢獻者授權協議下，貢獻者明確地授權持有人使用他們的貢獻，同時持有人也明確地允許貢獻者在合適時使用他們的貢獻。

然而，很多開發人員認為貢獻者授權協議是有問題的，因為它賦予持有人包括更改代碼授權的權利。 [這裡有一份gitlab出色的書面說明](https://about.gitlab.com/2017/11/01/gitlab-switches-to-dco-license/)，講述它們為什麼從貢獻者授權協議轉換到開發者原創證書(DCO) - 這是它們[從項目管理角度的深入分析](https://docs.google.com/a/gitlab.com/document/d/1zpjDzL7yhGBZz3_7jCjWLfRQ1Jryg1mlIVmG8y6B1_Q/edit?usp=sharing)。

### 什麼是 "開發者原創證書" (DCO)

開發者原創證書是由貢獻者作出的法律聲明，証明他們自己編寫了這貢獻，及擁有法律權力來貢獻這代碼。 正如上面Gitlab的例子，它通常與MIT或Apache等的授權結合使用。 你可以在此閱讀整個授權 (很短的)：https://developercertificate.org/

當你把`signed-off-by`標誌添加到git的提交時，這代表你以開發者原創證書行事。 雖然這不是每個提交都需要，但它提供了一種"問責鏈"以防事情出錯。 最好的實踐建議是使用貢獻者的真實名字。 你可在此閱讀更多相關資訊：https://stackoverflow.com/a/1962112

部份IDE如[Webstorm](https://www.jetbrains.com/help/webstorm/2017.2/using-git-integration.html#commit)讓你在查看代碼時就能從提交視窗直接添加這標誌。 它將在提交訊息的最尾添加以下一行：`Signed off by: <username>`

請注意，如果你正在處理的項目的經理要求你登出，請了解清楚他們是希望你每次提交都登出，還是只需簽署標簽或PR就可以了。 技術上來說，進行合併的人是需要登出的，但通過添加你的名字到個人提交中，就可以清楚地了解誰真正對哪些變化負責。 這是偏好的問題。

> 在Quasar我們要求你簽署所有提交。

### 成為"認證"貢獻者

Github或Gitlab的認證貢獻者是添加了GPG金鑰到帳戶的開發人員，他們使用這GPG金鑰來簽署他們的提交。 雖然這不是整合需要，但部份項目經理可能需要它 - 尤其是竊取某人登入憑據及修改關鍵存儲庫比竊取GPG金鑰更容易的情況下。

以下的連結將為你展示如何創建GPG金鑰及在有需要時於Github或Gitlab使用。

- [添加GPG金鑰到Github](https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/)
- [在Gitlab簽署提交](https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/index.html)
- https://blog.github.com/2016-04-05-gpg-signature-verification/
- https://stackoverflow.com/questions/10161198/is-there-a-way-to-autosign-commits-in-git-with-a-gpg-key

### 我何時需要得到"豁免"書

在為私人財產和人拍攝照片，並以非私人目的使用時，一般都需要一份"豁免"書。 雖然各管轄區之間的具體細節都不同，但讓人簽署一份豁免書十分重要。如果照片的拍攝地點很清楚，那麼你可能需要得到獲有者的同意。

> 有一種巧妙地處理肖像轄免書(如果肖像擁有人真的想支持你) 的方法，就是所謂的"互惠支付"。 在拍攝前，先準備兩張收據。 在一張收據上，你寫上例如5歐元作為他作為模特的報酬。 在另一張收據上，他同樣寫上5歐元以購買一份照片的副本。 規則 (得到現金，保留副本）適用，所以雙方都有一張正本收據及一張副本收據。 你將最後圖像的數碼副本連結發送到使用它的開源存儲庫，並備注在他們給你的收據副本上。 將這保留在你自己的紀錄上，大家高興。

如果你確實使用了你拍攝的肖像照並提交到開源項目，你需要能夠證明肖像的主人已給予你授權，並已保存其豁免書可隨時使用。

### 如何記錄 "出處"

出處是用來描述作品歷史的一個詞。 在開源授權下和git存儲庫中共用的程式碼大致是自文檔的。 圖像則沒有那麼明顯，尤其是結合了數個資源的數碼拼貼作品，更是棘手。

處理設計師的出處十分重要，因為視覺圖像的權利競爭激烈，往往導致法律糾紛。 即使是只使用公共領域資源，在出處文件中紀錄你的工作仍是一個很好的做法。 這類型的文件就像科學論文中的參考書目，紀錄了作者及想法。 雖然沒有"標準化"的方法，但最好的方法是不僅記錄來源及存取時間，並跟踪每個元件的授權。 如果您想要例子, 請隨時查看以 @utopian-io 樣式編寫的  細分此圖形 </0 > 的引文部分。</p> 

> 人們最不希望的就是法律糾紛，因為它消耗了時間和金錢等資源。 如果你在為開源項目做貢獻, 確保你不要陷入其中。 在Quasar，你則大可放心，因為藝術部門非常重視這個問題，所有違反這種信任都很可能導致進入黑名單或封禁帳戶。

## 授權類型

### 代碼的主要授權

本介紹不可能解釋所有不同代碼授權之間的細微差異，因為有多達數十個授權存在。 A license is added to code by either placing a reference to it in the header of the file being licensed in the case of distributables, in a LICENSE file in the root level of a repository, in the README about the project or potentially in the package.json (if using node).

If you skipped ahead and didn't read the earlier chapters, here is a quick recap of the three main license types and a popular example of each, along with two links that go into more detail and analysis.

- **寛鬆性**: [MIT](http://www.opensource.org/licenses/MIT)
- **保護性**: [GPL-3](https://www.gnu.org/licenses/gpl-3.0.en.html)
- **公有領域**: [WTFPL](http://www.wtfpl.net/)
- [Github 的授權助手](https://choosealicense.com/)
- [GNU 基金會的詳盡列表](https://www.gnu.org/licenses/license-list.html)

> At the Quasar Framework all contributions to the core libraries are required to be MIT. 在參與任何貢獻時，已代表你同意此授權。

### 文本/文檔的重要授權

文本和文檔也是一項創造性的作品，一般情況下也受版權法的保護。 You can transfer these rights to third parties or to project owners to whom you will be giving your contributions by choosing either a Creative Commons resource or the Free Document License.

在授權文檔結尾命名授權和作者往往是最好做法。

- [共享創意](https://creativecommons.org/)
- [Free Documentation License](https://www.gnu.org/licenses/fdl.html)

> At the Quasar Framework all documentation is (or will be) licensed under the FDL.

### 授權藝術品/設計/影片

There are literally as many legal regulations for this type of contribution as there are countries on the planet, so it is absolutely inappropriate to go into detail about how things are different from nation to nation. No matter what, the person that made the image can never lose the right to say that they were the owner (unless an absolutely draconian contract prevents it - and in some cases this won't stand up in court). 這就是為什麼會有一條通用規則：引用作者並命名授權。 If you can't do that, then don't use the asset.

根據貢獻被使用地點和方式，可以通過多種方法進行引用：

1. 相應地命名文件
2. 將授權資料包含到文件水印中
3. 將資訊注入到文件的元數據
4. 如果可以的話，直接在圖像後面引用圖像來源/授權
5. 將相同資訊包含到註腳/結束說明/連結文件
6. 將授權資訊或授權和豁免書封面頁放置在存儲庫與圖像同一個資料夾中，或其他指定位置

用於圖像/設計/影片的常見授權包括：

- [共享創意](https://creativecommons.org/)
- [公共領域/CC0](https://creativecommons.org/share-your-work/public-domain/cc0/)
- [Apache v2](https://apache.org/licenses/LICENSE-2.0)

> Quasar比較喜歡採用CC-BY 或 CC0 授權。

### 字體授權

Of the hundreds of fonts listed at [Google Fonts](https://fonts.google.com/attribution), there are exactly two different licenses used: Either the Apache License v2, or the SIL Open Font License v1.1. The vast majority are OFL, and it is basically the same type of permissive license as MIT.

If you are using a font, you need to make sure that you really have the license for it, as some professional font forges will sell different types of licenses depending on the application. (As in one license for desktop publishing, another for websites, etc.) If you are using an open-source font, best-practice is to put a copy of the license in the folder where you are maintaining your fonts.

Furthermore, some services like FontSquirrel offer a [WebfontGenerator](https://www.fontsquirrel.com/tools/webfont-generator) that enables designers to make a set of font-files so that individual browsers can select the type that they are most well-equipped to use. 它們要求你驗證自己是否有權將字體轉換為其他格式。 SIL及OFL確實允許這樣做。 如果你找不到授權，請假設你沒有使用該字體的權利。

- [OFL - 常見問題網頁版本 (1.1-update5)](https://scripts.sil.org/cms/scripts/page.php?item_id=OFL-FAQ_web)

# 結語

僅僅因為你 "開放" 了你的作品讓別人協作，還不是最後。 僅僅因為你在 Photoshop 文件上拍上了共享創意授權，並不意味著它是開放和免費的。 The degree of openness of an asset or project is also determined by the operating system and the software needed to use and or modify the file. 請考慮不僅公佈你的工作過程的結果，而且告訴人們你是如何做到的。

此外，在從事開源項目時，請不要使用盜版軟體。 Not only is it "uncool" and damaging to the honour of the entire open-source community, you are putting yourself and your colleagues at risk, especially if you have high-value credentials, like server logins etc. 沒有比使用盗版更好的方法來讓駭客攻擊自己了 (可能還有你的團隊)。

# 更多資源

如果你想更深入地瞭解這些主題，我們強烈建議一些附加資源：

- 斯托曼解釋[FLOSS and FOSS](https://www.gnu.org/philosophy/floss-and-foss.en.html)之間的分別
- ZeroMQ 指南</0 > 的這一章詳細介紹了開源項目的治理，並提供了其社區的具體例子</li> </ul> 
    
    #### 完成工作證明 (原創)
    
    本文的原始版本由 @nothingismagick 編寫 https://github.com/nothingismagick
    
    #### 授權
    
    本文和所有衍生產品都是 [FDL 1.3授權](https://github.com/nothingismagick/quasar-articles/blob/master/LICENSE)。
    
    > 使用[StackEdit](https://stackedit.io/)編寫