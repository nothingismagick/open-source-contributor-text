*Un'introduzione approfondita all'Open-Source con alcuni esempi specifici tratti dall'approccio utilizzato dal Framework Quasar, dato che abbiamo intenzione di utilizzare questo tutorial come formazione e riferimento per tutti i futuri (ed esistenti) collaboratori.*

### Repository

https://github.com/nothingismagick/quasar-articles/blob/master/tutorials/openSourceTutorial.md

<center>
  <img src="https://ipfs.busy.org/ipfs/QmNh5ir9k6hrJNZNnhYXKgvMGfAzUPWFiVyDmss2J3kacJ" alt="GPL_MIT_glow.png" /> Image: CC0 by @nothingismagick
</center>

### Di cosa si parlerà?

> Imparerai a conoscere l'Open Source e le migliori pratiche per assicurarti che i tuoi contributi siano conformi.

#### **Introduzione**

- Imparerai la differenza tra diritto d'autore, concessione di licenze e attribuzioni
- Scoprirai il significato di "Software Gratuiti/Liberi e Software Open Source"
- Scoprirai qual è la differenza tra le licenze "Permissive" e "Protettive"
- You will learn about license discovery and licensing agreements
- Imparerai ad usare il codice e altre risorse che sono open-source

#### **La tua Identità e i tuoi Diritti**

- Imparerai cosa sono gli "accordi di non divulgazione"
- You will learn about "Contributor License Agreements" (CLA)
- Imparerai come si diventa un collaboratore "verificato"
- Imparerai perché vengono usati i "certificati di origine dello sviluppatore"
- Imparerai cosa significa "firmato da"
- Imparerai cosa sono le “liberatorie”
- Imparerai cosa è la "provenienza"

#### **Tipi di Licenza**

- Licenze per codice
- Licenze per testo / documentazione
- Licenze per opere d'arte / design / video
- Licenze per font

### Requisiti

- Devi saper leggere bene in inglese
- Una conoscenza di base di `git` 
- Conoscenza dei tipi di file rilevanti per il tuo settore di attività 

### Difficoltà

- Tra basilare e medio

# Contenuto del tutorial

> Questo tutorial è un primer per coloro che sono interessati a contribuire ai progetti di tipo open-source. Potrebbe tornare utile anche ai collaboratori attivi che sono sempre stati curiosi riguardo ad argomenti più avanzati. Ed infine, poiché le licenze possono essere un argomento molto controverso, questo è anche un testo per quelli che vogliono intraprendere una discussione riguardante l'open-source. Anche se stiamo usando esempi specifici del "Framework Quasar", le questioni qui contenute sono rilevanti per tutto lo spettro dello sviluppo di software open-source.
> 
> La nostra speranza è che possiate acquisire una visione più approfondita di tutte le grandi cose (e le potenziali insidie) che circondano le licenze nel mondo del software open-source. L'introduzione è un ottimo punto di partenza, in quanto definisce alcuni dei termini su cui questo tutorial tornerà costantemente. Inoltre, ti insegnerà alcuni semplici metodi per assicurarti che i tuoi contributi siano conformi allo schema di attribuzione di licenze adottato dal progetto su cui stai lavorando. Poi, inizia una discussione su di te, il collaboratore, e sui diritti e le responsabilità che hai. Infine, verranno approfonditi i vari domini della gestione delle licenze, tra cui codice, copia, design e font.

## Prefazione

> Alcuni software hanno un codice sorgente che può essere modificato solo dalla persona, dal team o dall'organizzazione che l'ha creato e che detiene il controllo esclusivo su di esso. La gente chiama questo tipo di software "proprietario" o "closed source". ... Il software di tipo open source è differente. I suoi sviluppatori [rendono il relativo codice sorgente disponibile](https://opensource.com/business/13/5/open-source-your-code) per coloro che desiderano visualizzarlo, copiarlo, imparare da esso, modificarlo o condividerlo. [LibreOffice](https://www.libreoffice.org/) e [GNU Image Manipulation Program](http://www.gimp.org/) sono degli esempi di software di tipo open source.

https://opensource.com/resources/what-open-source

Ogni atto creativo può essere attribuito a qualcuno o a un gruppo di persone che lavorano insieme. In fact, it is actually quite silly to think that anything exists in a vacuum. Siamo tutti connessi, e le idee sono cose che spesso prendono vita da sole. Tuttavia, attualmente, molte persone hanno iniziato a proteggere le loro idee dal furto rinunciando ad esse - pubblicando il loro lavoro in modo che altre persone vengano incaricate e incoraggiate a contribuire al progetto - o addirittura a portarlo in una direzione completamente differente.

Non diversamente dal modo in cui le corporazioni dei secoli passati proteggevano i loro segreti commerciali, la scusa di una protezione "proprietaria" delle idee e un inglobamento del "closed source" nella legislazione e negli accordi di libero scambio può essere ricondotta direttamente a molti dei problemi che il turbo-capitalismo ha scatenato sul nostro pianeta. Ma indovina un po’ - puoi fare qualcosa. Puoi prendere parte al movimento open-source.

## Introduzione

### Copyright, Assegnazione di Licenze e Attribuzione

Nella nostra società è un usanza comune che un avviso di copyright sia richiesto come prefazione per tutte le licenze, perché qualcuno deve essere responsabile di dichiarare in che modo può essere usata la cosa per cui si sta rilasciando la licenza. In un intreccio strano (ma in qualche modo anche logico), se vuoi condividere il tuo lavoro come di Pubblico Dominio o Copyleft, devi prima dichiarare di essere il proprietario del tuo lavoro (e che tutti coloro che hanno contribuito ad esso sono d'accordo con te su questo fatto).

Una volta che un copyright è stato dichiarato, il titolare del copyright può informare i lettori e gli utilizzatori del codice / testo / opera d'arte in quali circostanze è opportuno utilizzarlo. Indipendentemente dal tipo di approccio adottato dall'autore originale / detentore del copyright per la concessione della licenza, nel caso in cui si utilizzino opere open-source concesse su licenza da terzi, è sempre opportuno conservare le copie di queste licenze nella repository che ospita l'opera. Non è in alcun caso corretto rimuovere o modificare i file di licenza o i riferimenti di licenza nelle intestazioni o nei metadata dei file sorgente - perché questo è letteralmente un furto e una forma di plagio.

Finché i "consumatori" delle tue creazioni (sito web, app, ecc.) sono informati su dove possono visualizzare le licenze dei progetti creati da terzi che hai usato per costruire il tuo progetto, puoi anche evitare di spedire loro queste licenze.

Qualora decidessi di utilizzare qualsiasi cosa creata da terzi all'interno del tuo progetto, ad eccezione delle opere di dominio pubblico (per le quali personalmente ritengo che dovresti comunque citare la fonte), sei obbligato (sia legalmente che moralmente) a citare la fonte. Tutto ciò viene chiamato **attribuzione**, ed è una regola generale includere riferimenti su tutto il codice che stai utilizzando. Torneremo su questo punto più avanti nel tutorial, perché ci sono diversi requisiti a seconda dei domini a cui appartiene la risorsa che viene attribuita.

### "Software Gratuito/Libero e Open Source"

> Il termine "open source" si riferisce a qualcosa che le persone possono modificare e condividere poiché il suo design è pubblicamente accessibile.
> 
> https://opensource.com/resources/what-open-source

There is a perpetual discussion by FLOSS hardliners about the degree of **freedom** inherent in "open" source - and even what **free** means. Comunque, potrebbe essere una buona idea fare un passo indietro nel tempo, tornando al 1998, e [leggere questo articolo](https://opensource.com/article/18/2/coining-term-open-source-software) scritto da Christine Peterson, la donna che ha inventato il nome "open source". Although Richard Stallman and Linus Torvalds are two of the most successful, visible and vocal proponents on the matter; the point is that even though the term began as a "marketing device", it stuck and changed the lives of everyone on the planet - arguably for the better.

Stallman e la "Free Software Foundation" (FSF), che sono probabilmente i più anziani nel campo, definirebbero la libertà come una parte importante dell'open source, perché la libertà di utilizzare e modificare il codice è anche una responsabilità che uno si prende nel nome dell'intera comunità.

<center><strong>Cosa significa gratuito? Cosa significa libero?</strong></center>

Se si ignora per un momento il fastidioso fatto che in inglese *“free”* significa sia libero che gratuito (che è stato il motivo principale per cui si è aggiunto anche il termine “libre”), c'è ancora, di fatto, un problema semantico irrisolto, un problema che forse non verrà mai risolto:

A seconda del proprio punto di vista, la Gnu Public License non è COMPLETAMENTE libera, perché chiede di restituire alla comunità le modifiche apportate al codice - ed essere liberi significherebbe che si può decidere come lavorare e cosa fare con il codice che si usa. Contemporaneamente e su uno spettro diverso, c'è chi ritiene che la licenza MIT non sia completamente libera. La pensano così perché ci sono alcune circostanze in cui il codice può essere modificato senza poi essere restituito alla comunità - in un certo senso "imprigionando", il codice.

> In questi casi non esiste un pensiero giusto o sbagliato, perché dipende tutto dalla prospettiva con cui si guardano le cose. Comunque ogni sviluppatore e ogni organizzazione devono decidere da soli su cosa vogliono concentrare la propria attenzione. At the Quasar Framework, we are not purists in the sense that we believe Code is in and of itself a spiritual being deserving of transferrable rights. Forse, se stessimo lavorando sul Kernel Linux sarebbe stato diverso - ma noi siamo più preoccupati della parte umana del codice e crediamo che le persone che utilizzano il nostro progetto dovrebbero avere la libertà di decidere che cosa vogliono fare. Per questo motivo abbiamo adottato un approccio "permissivo" e abbiamo scelto la licenza MIT.

Ci sono sempre molte discussioni su "quanto rendere libero il proprio codice". Per questo vi propongo di farvi quattro domande:

1. Preferisci lavorare da solo?
2. Hai paura che qualcuno possa rubare il tuo lavoro?
3. Hai scritto da solo tutto il codice, incluse le librerie?
4. Hai firmato qualche accordo di non divulgazione riguardante il progetto in questione?

Se hai risposto **no** a qualcuna di queste domande, allora la migliore cosa sarebbe scegliere una licenza di tipo open source.

Se hai risposto **si** a tutte queste domande, forse attribuire una licenza di tipo open-source è comunque uno dei migliori modi per proteggere il tuo lavoro e assicurarti che abbia un impatto sul resto del mondo. Basti pensare a questo: se tutti i software che ti circondano oggi non fossero open source, saresti ancora in grado di lavorare come fai di solito? Non hai il dovere verso la comunità di condividere il tuo lavoro?

### Licenza Permissiva vs. Licenza Protettiva

Una delle idee sbagliate più diffuse riguardanti la concessione di licenze per il vostro progetto con GPL, è che impedirà alle aziende di prendere la vostra idea e usarla per fare soldi - il tutto senza darvi alcuna parte dei profitti. Questo è palesemente falso. Se qualcuno vuole rubare il vostro codice e infrangere la legge, lo farà. Se una società vuole usare la vostra libreria GPL, può isolarla dal resto del loro sistema e non rivelare nulla del loro codice proprietario. Possono prendere il vostro codice, decodificarlo e riscriverlo. Se questa è la vostra maggiore preoccupazione, allora fermatevi, tornate all'inizio di questo tutorial e leggete attentamente per decidere se volete prendere parte all'open-source - o semplicemente sfruttarlo.

MIT, BSD e Apache sono quelle che la comunità del software open-source chiama licenze "permissive". Permissiva significa che l'autore vi sta concedendo una gran parte di diritti per utilizzare il software che sta condividendo, persino il diritto di usarlo per trarne profitto e modificarlo per adattarlo ai vostri scopi. Finché si conservano copie della licenza originale e si informano coloro che sono interessati che si sta utilizzando quel particolare software, è possibile fare qualsiasi cosa con il codice - persino modificarlo senza dire a nessuno che l'avete fatto.

> Il copyleft è la pratica di offrire alle persone il diritto di distribuire liberamente copie e versioni modificate di un'opera con la clausola che gli stessi diritti siano conservati nelle ["opere derivate"](https://en.wikipedia.org/wiki/Derivative_works) create successivamente. https://it.wikipedia.org/wiki/Copyleft

Questo tipo di licenze "protettive" va oltre le licenze "permissive" viste con il MIT e APACHE, cercando di proteggere il codice e i diritti della comunità. Qualsiasi modifica apportata al codice sorgente deve essere restituita alla comunità, e non si può concedere in sublicenza il codice. GPL e CC-SA sono due tipi di licenze che funzionano in questo modo.

### Rilevamento delle licenze e requisiti per la concessione di licenze

L'uso di software open-source nei vostri progetti è un’ottima cosa, ma dovete rimanere diligenti, specialmente quando state contribuendo a un altro progetto. E questo è doppiamente vero se siete tenuti a dare riscontro in merito alla conformità delle licenze (ad esempio nel caso di agenzie pubbliche o nei firewall legali aziendali). In ogni caso, rivedere e rintracciare manualmente tutti i file di licenza può essere una rottura di scatole.

Ci sono alcuni progetti che trattano questo tema della ricerca, come ad esempio [nlf](https://www.npmjs.com/package/nlf) e [https://fossa.io/](https://fossa.io/ "https://fossa.io/") e nello specifico [il loro **CLI** gratuito che non richiede alcuna registrazione](https://github.com/fossas/fossa-cli).

    $ nlf --summary detail > nlf.txt
    

[Ecco un rapporto fatto dal repo Quasar usando l'approccio **nlf**.](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/nlf_report_licenses_quasar.txt.md)

Se volete visualizzare un rapporto di licenza generato da **fossa CLI** nel vostro repository, dopo aver seguito le loro istruzioni per l'installazione, potete semplicemente usare questo comando:

    $ fossa report licenses > fossa.txt
    

[Questo è un report creato dalla repo Quasar utilizzando l'approccio **fossa cli**.](https://raw.githubusercontent.com/nothingismagick/quasar-articles/master/tutorials/fossa_report_licenses_quasar.txt.md) Come potete vedere, la maggior parte dei moduli usa una licenza MIT, ma molti non sono chiari solo dal report: 15 dei progetti non sono stati rilevati automaticamente da **fossa**. Ho seguito ognuno dei link, ho rintracciato le loro licenze e ho creato una nota non solo della licenza, ma anche del fatto che sono stato io a farlo.

Inoltre, ho notato che solo una delle nostre librerie (stylint) richiede una licenza GPL, ma gli sviluppatori hanno un conflitto di licenza nella dichiarazione nel package.json (GPL-2) e nel file di licenza vero e proprio (GPL-3).

Questo è ciò che dovreste fare anche voi. Se un file di licenza non dovesse essere incluso nel progetto, è non riesci a trovarne uno, sarebbe opportuno contattare l'autore.

**Un avvertimento**: Questi sistemi automatizzati non sono infallibili (ad esempio un modulo di ricerca potrebbe rilevare molteplici licenze, anche se lui stesso ne sta utilizzando un’altra). Se siete vincolati dalle normative, è necessario esaminarli tutti manualmente - e non abbiate paura di contattare l'autore se avete bisogno di chiarimenti - o persino di una licenza diversa. A volte può capitare. Ricorda, è meglio chiedere il permesso piuttosto che chiedere scusa.

### Utilizzando l'open-source

Se stai utilizzando qualsiasi cosa che è open-source, è necessario dichiarare il suo utilizzo e rendere le licenze originali facilmente accessibili. Se, per esempio, stai utilizzando, moduli di nodo nel tuo progetto, allora queste licenze sono disponibili nel codice sorgente del progetto quando qualcuno scarica i file del progetto ed "installa" le dipendenze. Di solito puoi trovarla come un file chiamato `LICENSE` nella cartella principale oppure nel campo "license" nel `package.json`

Normalmente questo è sufficiente, tuttavia, se si apportano modifiche alla libreria originale, potrebbe essere necessario avvisare e/o inviare queste modifiche alla comunità. Questo dipende dal tipo di licenza, ma tratteremo le specifiche per la concessione della licenza nella sezione finale.

> **Stack Overflow**: Un errore comune è semplicemente copiare e incollare le cose che si trovano su stackoverflow.com - ma questo è pericoloso, perché anche se è sottinteso che l'utente sta condividendo queste informazioni, non si sa con certezza al 100% se è opportuno (o permesso) usare l'esempio di codice 1 a 1. La pratica comune di citare la fonte è meglio di niente, ma dovresti davvero considerare la possibilità di riscrivere l'esempio per adattarlo al tuo stile di codice, alle esigenze del tuo progetto E citare la fonte come "ispirazione".

## La tua Identità e i tuoi Diritti

### Cos’è un "Accordo di Non Divulgazione" (NDA)

Un accordo di non divulgazione è un contratto che vi potrebbe essere richiesto di firmare se lavorerete con un'organizzazione che ha segreti commerciali da proteggere. In qualità di firmatario dell'accordo di non divulgazione, sarete vincolati dal contratto a mantenere la segretezza sulle informazioni che vi sono state fornite, e può includere clausole di non concorrenza in un settore simile per un determinato periodo di tempo. Anche se questo è solitamente raro nel settore open-source, può essere richiesto se si ha accesso a "segreti" come chiavi API, credenziali di accesso e simili.

> Se vi viene presentato un accordo di non divulgazione, come per qualsiasi contratto, è una scelta saggia leggere tutto, fare domande e chiedere il parere di un avvocato. Quasar non ti chiederà mai di firmare un accordo di non divulgazione.

### Cosa è un "Accordo di licenza del collaboratore" (CLA)

Un accordo di licenza del collaboratore è un contratto tra il proprietario di un progetto e chi contribuisce al codice. Contrariamente da un NDA (il quale è restrittivo), un CLA è "reciproco" dato che esiste per proteggere i diritti del proprietario e del collaboratore. With a CLA, contributors explicitly give the owner permission to use the contribution, and owners explicitly permit the contributor to use their contributions as they see fit.

However, many developers consider a CLA to be problematic because of the rights that they confer upon the owner, which include the ability to change the license of the code. [Here is a great writeup by gitlab](https://about.gitlab.com/2017/11/01/gitlab-switches-to-dco-license/) about why they switched from a CLA to a DCO - and here is their [in-depth analysis from a project-management perspective](https://docs.google.com/a/gitlab.com/document/d/1zpjDzL7yhGBZz3_7jCjWLfRQ1Jryg1mlIVmG8y6B1_Q/edit?usp=sharing).

### What is a "Developer Certificate of Origin" (DCO)

A Developer Certificate of Origin is a legal statement made by a contributor where they certify that they themselves have authored the contribution and that they have legal authority to contribute this code. As with the Gitlab example above, this is usually made in combination with a license such as MIT or Apache. You can read the entire license here (it's brief): https://developercertificate.org/

By adding the `signed-off-by` flag to your git commit, you are saying that you are acting in accordance with the DCO. Although not necessary for every commit, it is there to provide a sort of "blame-chain" in case things go wrong. Best practice suggests using the real name of the contributor. You can read more about the details of doing this here: https://stackoverflow.com/a/1962112

Some IDE's, like [Webstorm](https://www.jetbrains.com/help/webstorm/2017.2/using-git-integration.html#commit), offer you the ability to add this flag directly from the commit window when you are reviewing your code. It will add the following line to the end of the commit message: `Signed off by: <username>`

Please note, if the managers of the project you are working on ask you to sign off, check to make sure that they really want you to sign off with every commit, or if it is enough to sign-off on tags or PR's. Technically speaking, the person doing the merge is the one who is required to sign-off, but by adding your name to the individual commits it becomes clear who was really responsible for which changes. It is a matter of preference.

> At Quasar we ask you to sign-off on all commits.

### Become a "verified" contributor

Verified contributors on Github or Gitlab are developers who have added a GPG key to their account and use this GPG key to sign their commits. Although it is not necessary for integration, some project managers may require it - especially since it is easier to steal someone's login credentials and modify a critical repository than it is steal their GPG key.

The following links will show you how to create a GPG key and use them with Github or Gitlab, as needed.

- [Add a GPG Key to Github](https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/)
- [Signing commits on Gitlab](https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/index.html)
- https://blog.github.com/2016-04-05-gpg-signature-verification/
- https://stackoverflow.com/questions/10161198/is-there-a-way-to-autosign-commits-in-git-with-a-gpg-key

### When do I need to get "release" forms

A release form is generally required when making photographs of people and private property - and using them for any non-private purpose. Although specifics vary from jurisdiction to jurisdiction, it is very important that you get people to sign a release form, and if it is clear WHERE the picture was taken, then you might need to get permission of the owner.

> One clever way to deal with a release form for humans (if they genuinely want to support you) is a so-called "reciprocal pay". Before the photo-shooting, prepare two receipts. On one receipt you pay them e.g. 5 EUR for being a model. On the other receipt, they pay you e.g. 5 EUR for a copy of the photograph. The rule (got the cash, keep the copy) applies, so each party has one original receipt and one copy receipt. You send them a digital copy of the final image as a link to the open-source repository where it was used, and note this on the copy of the receipt they gave you. Keep this in your own records, and everybody is happy.

If you do use photographs of people that you have made and submit them to open source projects, you need to be able to prove that the person gave you permission, and you should keep their release form on file and available.

### How can I document "provenance"

Provenance is a word that describes the history of a work. Code that is shared under an open-source license and within the context of a git repository is more or less self-documenting. Images are less obvious, and it is especially tricky with digital-collage works that combine a number of resources.

Dealing with provenance for designers is important, as rights to visual images are hotly contested and often times lead to legal battles. Even if only public-domain resources are being used, it is still a good practice to record your work in a provenance document. This type of document is like the bibliography in a scientific paper, in which the ideas and authors are recorded. Although there is no "standardised" approach, the best method is to not only record the sources and the times accessed, but also track down the licenses for each component. If you want an example of this, feel free to look at the citations section [in this graphics breakdown](https://busy.org/@nothingismagick/qcensus2018-campaign-graphics-breakdown) written in the @utopian-io style.

> The last thing anyone wants is a legal battle because it drains resources like time and money. If you are contributing to an open-source project, make sure that you are not putting them in hot-water. At Quasar, you can rest assured that the Art Department takes this VERY seriously, and violations of this trust are likely to lead to blacklisting or hammerbanning.

## License Types

### Major licenses for code

This introduction cannot possibly explain the subtle differences between all of the different licenses for code, because there are dozens. A license is added to code by either placing a reference to it in the header of the file being licensed in the case of distributables, in a LICENSE file in the root level of a repository, in the README about the project and potentially in the package.json (if using node).

If you skipped ahead and didn't read the earlier chapters, here is a quick recap of the three main license types and a popular example of each, along with two links that go into more detail and analysis.

- **Permissive**: [MIT](http://www.opensource.org/licenses/MIT)
- **Protective**: [GPL-3](https://www.gnu.org/licenses/gpl-3.0.en.html)
- **Public Domain**: [WTFPL](http://www.wtfpl.net/)
- [Github's License Helper](https://choosealicense.com/)
- [The exhaustive list by the GNU Foundation](https://www.gnu.org/licenses/license-list.html)

> At the Quasar Framework all contributions to the core libraries are required to be MIT. By contributing anything, you are agreeing to this license.

### Important licenses for text / documentation

Text and documentation is also a creative work, and is also generally protected under copyright laws. You can transfer these rights to third parties or to project owners to whom you will be giving your contributions by choosing either a Creative Commons resource or the Free Document License.

It is considered best practice to name the license and author(s) at the end of the document being licensed.

- [Creative Commons](https://creativecommons.org/)
- [Free Documentation License](https://www.gnu.org/licenses/fdl.html)

> At the Quasar Framework all documentation is (or will be) licensed under the FDL.

### Licensing artwork / design / video

There are literally as many legal regulations for this type of contribution as there are countries on the planet, so it is absolutely inappropriate to go into detail about how things are different from nation to nation. No matter what, the person that made the image can never lose the right to say that they were the owner (unless an absolutely draconian contract prevents it - and in some cases this won't stand up in court). This is why there is one common rule that will : Cite the author and name the license. If you can't do that, then don't use the asset.

Depending on where and how the contribution is to be used, there are a number of ways in which this citation can be made:

1. Name the file accordingly
2. Put license information in a watermark in the file
3. Inject the information into the metadata of the file
4. Cite the image sources / licenses directly after the image if possible
5. Put this same information in a footnote / endnote / linked document
6. Place license information or licenses and release form-cover-sheets in the repository in the same folder as the image or some other delegated location

Common licenses to use for Images / Designs / Videos are:

- [Creative Commons](https://creativecommons.org/)
- [Public Domain / CC0](https://creativecommons.org/share-your-work/public-domain/cc0/)
- [Apache v2](https://apache.org/licenses/LICENSE-2.0)

> Quasar prefers CC-BY or CC0 licenses.

### Font licenses

Of the hundreds of fonts listed at [Google Fonts](https://fonts.google.com/attribution), there are exactly two different licenses used: Either the Apache License v2, or the SIL Open Font License v1.1. The vast majority are OFL, and it is basically the same type of permissive license as MIT.

If you are using a font, you need to make sure that you really have the license for it, as some professional font forges will sell different types of licenses depending on the application. (As in one license for desktop publishing, another for websites, etc.) If you are using an open-source font, best-practice is to put a copy of the license in the folder where you are maintaining your fonts.

Furthermore, some services like FontSquirrel offer a [WebfontGenerator](https://www.fontsquirrel.com/tools/webfont-generator) that enables designers to make a set of font-files so that individual browsers can select the type that they are most well-equipped to use. They require you to verify that you have the right to convert the font to other formats. The SIL OFL does permit this. If there is no license that you can find, assume that you do not have the right to use the font.

- [OFL-FAQ web version (1.1-update5)](https://scripts.sil.org/cms/scripts/page.php?item_id=OFL-FAQ_web)

# Final Words

Just because you "open" your work to collaboration from others, this is not the end of the story. Just because you slap a Creative Commons license on a photoshop file does not mean it is open and free. The degree of openness of an asset or project is also determined by the operating system and the software needed to use and or modify the file. Please consider publishing not only the results of the process of your work, but also inform people about how you did it.

Furthermore, please do not use pirated software when working on open-source projects. Not only is it "uncool" and damaging to the honour of the entire open-source community, you are putting yourself and your colleagues at risk, especially if you have high-value credentials, like server logins etc. There is no better way to get yourself (and possibly your team) hacked than to use cracks.

# Further Resources

In case you want to go more into depth about these topics, we have a few additional resources that we highly recommend:

- Stallman's distinction between [FLOSS and FOSS](https://www.gnu.org/philosophy/floss-and-foss.en.html)
- This chapter of the [ZeroMQ Guide](http://zguide.zeromq.org/page:all#toc141) goes into great detail about governance in open-source projects with the specific example of their community

#### Proof of Work Done (Authorship)

The original version of this article has been compiled and written by @nothingismagick https://github.com/nothingismagick

#### License

This work and all derivatives are [licensed under the FDL 1.3](https://github.com/nothingismagick/quasar-articles/blob/master/LICENSE).

> Written with [StackEdit](https://stackedit.io/).